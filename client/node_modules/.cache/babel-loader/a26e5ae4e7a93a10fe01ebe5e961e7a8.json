{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scs\\\\OneDrive\\\\Desktop\\\\9 hours insa_allah\\\\client\\\\src\\\\components\\\\mainpages\\\\cart\\\\PaypalButton.js\";\n// import React from \"react\";\n// import PaypalExpressBtn from \"react-paypal-express-checkout\";\n\n// export default class PaypalButton extends React.Component {\n//   render() {\n//     const onSuccess = (payment) => {\n//       // Congratulation, it came here means everything's fine!\n//       console.log(\"The payment was succeeded!\", payment);\n//       // You can bind the \"payment\" object's value to your state or props or whatever here, please see below for sample returned data\n//       this.props.tranSuccess(payment);\n//     };\n\n//     const onCancel = (data) => {\n//       // User pressed \"cancel\" or close Paypal's popup!\n//       console.log(\"The payment was cancelled!\", data);\n//       // You can bind the \"data\" object's value to your state or props or whatever here, please see below for sample returned data\n//     };\n\n//     const onError = (err) => {\n//       // The main Paypal's script cannot be loaded or somethings block the loading of that script!\n//       console.log(\"Error!\", err);\n//       // Because the Paypal's main script is loaded asynchronously from \"https://www.paypalobjects.com/api/checkout.js\"\n//       // => sometimes it may take about 0.5 second for everything to get set, or for the button to appear\n//     };\n\n//     let env = \"sandbox\"; // you can set here to 'production' for production\n//     let currency = \"USD\"; // or you can set this value from your props or state\n//     let total = this.props.total; // same as above, this is the total amount (based on currency) to be paid by using Paypal express checkout\n//     // Document on Paypal's currency code: https://developer.paypal.com/docs/classic/api/currency_codes/\n\n//     const client = {\n//       sandbox:\n//         \"AZPHIaLi9FW_xyRn7Q2c5u7XAAA4ywJzezft7j2cJx2AZdLe5FBSm-FUfDUMKesNKYBBCZ4UuoDnYHP8\",\n//       production: \"YOUR-PRODUCTION-APP-ID\",\n//     };\n//     // In order to get production's app-ID, you will have to send your app to Paypal for approval first\n//     // For sandbox app-ID (after logging into your developer account, please locate the \"REST API apps\" section, click \"Create App\"):\n//     //   => https://developer.paypal.com/docs/classic/lifecycle/sb_credentials/\n//     // For production app-ID:\n//     //   => https://developer.paypal.com/docs/classic/lifecycle/goingLive/\n\n//     // NB. You can also have many Paypal express checkout buttons on page, just pass in the correct amount and they will work!\n//     let style = {\n//       size: \"small\",\n//       color: \"blue\",\n//       shape: \"rect\",\n//       label: \"checkout\",\n//       tagline: false,\n//     };\n\n//     return (\n//       <PaypalExpressBtn\n//         env={env}\n//         client={client}\n//         currency={currency}\n//         total={total}\n//         onError={onError}\n//         onSuccess={onSuccess}\n//         onCancel={onCancel}\n//         style={style}\n//       />\n//     );\n//   }\n// }\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pay() {\n  return /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n    options: {\n      \"client-id\": \"test\"\n    },\n    children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n      createOrder: (data, actions) => {\n        return actions.order.create({\n          purchase_units: [{\n            amount: {\n              value: \"1.99\"\n            }\n          }]\n        });\n      },\n      onApprove: (data, actions) => {\n        return actions.order.capture().then(details => {\n          const name = details.payer.name.given_name;\n          alert(`Transaction completed by ${name}`);\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_c = Pay;\nvar _c;\n$RefreshReg$(_c, \"Pay\");","map":{"version":3,"names":["PayPalScriptProvider","PayPalButtons","Pay","data","actions","order","create","purchase_units","amount","value","capture","then","details","name","payer","given_name","alert"],"sources":["C:/Users/scs/OneDrive/Desktop/9 hours insa_allah/client/src/components/mainpages/cart/PaypalButton.js"],"sourcesContent":["// import React from \"react\";\r\n// import PaypalExpressBtn from \"react-paypal-express-checkout\";\r\n\r\n// export default class PaypalButton extends React.Component {\r\n//   render() {\r\n//     const onSuccess = (payment) => {\r\n//       // Congratulation, it came here means everything's fine!\r\n//       console.log(\"The payment was succeeded!\", payment);\r\n//       // You can bind the \"payment\" object's value to your state or props or whatever here, please see below for sample returned data\r\n//       this.props.tranSuccess(payment);\r\n//     };\r\n\r\n//     const onCancel = (data) => {\r\n//       // User pressed \"cancel\" or close Paypal's popup!\r\n//       console.log(\"The payment was cancelled!\", data);\r\n//       // You can bind the \"data\" object's value to your state or props or whatever here, please see below for sample returned data\r\n//     };\r\n\r\n//     const onError = (err) => {\r\n//       // The main Paypal's script cannot be loaded or somethings block the loading of that script!\r\n//       console.log(\"Error!\", err);\r\n//       // Because the Paypal's main script is loaded asynchronously from \"https://www.paypalobjects.com/api/checkout.js\"\r\n//       // => sometimes it may take about 0.5 second for everything to get set, or for the button to appear\r\n//     };\r\n\r\n//     let env = \"sandbox\"; // you can set here to 'production' for production\r\n//     let currency = \"USD\"; // or you can set this value from your props or state\r\n//     let total = this.props.total; // same as above, this is the total amount (based on currency) to be paid by using Paypal express checkout\r\n//     // Document on Paypal's currency code: https://developer.paypal.com/docs/classic/api/currency_codes/\r\n\r\n//     const client = {\r\n//       sandbox:\r\n//         \"AZPHIaLi9FW_xyRn7Q2c5u7XAAA4ywJzezft7j2cJx2AZdLe5FBSm-FUfDUMKesNKYBBCZ4UuoDnYHP8\",\r\n//       production: \"YOUR-PRODUCTION-APP-ID\",\r\n//     };\r\n//     // In order to get production's app-ID, you will have to send your app to Paypal for approval first\r\n//     // For sandbox app-ID (after logging into your developer account, please locate the \"REST API apps\" section, click \"Create App\"):\r\n//     //   => https://developer.paypal.com/docs/classic/lifecycle/sb_credentials/\r\n//     // For production app-ID:\r\n//     //   => https://developer.paypal.com/docs/classic/lifecycle/goingLive/\r\n\r\n//     // NB. You can also have many Paypal express checkout buttons on page, just pass in the correct amount and they will work!\r\n//     let style = {\r\n//       size: \"small\",\r\n//       color: \"blue\",\r\n//       shape: \"rect\",\r\n//       label: \"checkout\",\r\n//       tagline: false,\r\n//     };\r\n\r\n//     return (\r\n//       <PaypalExpressBtn\r\n//         env={env}\r\n//         client={client}\r\n//         currency={currency}\r\n//         total={total}\r\n//         onError={onError}\r\n//         onSuccess={onSuccess}\r\n//         onCancel={onCancel}\r\n//         style={style}\r\n//       />\r\n//     );\r\n//   }\r\n// }\r\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\r\n\r\nexport default function Pay() {\r\n  return (\r\n    <PayPalScriptProvider options={{ \"client-id\": \"test\" }}>\r\n      <PayPalButtons\r\n        createOrder={(data, actions) => {\r\n          return actions.order.create({\r\n            purchase_units: [\r\n              {\r\n                amount: {\r\n                  value: \"1.99\",\r\n                },\r\n              },\r\n            ],\r\n          });\r\n        }}\r\n        onApprove={(data, actions) => {\r\n          return actions.order.capture().then((details) => {\r\n            const name = details.payer.name.given_name;\r\n            alert(`Transaction completed by ${name}`);\r\n          });\r\n        }}\r\n      />\r\n    </PayPalScriptProvider>\r\n  );\r\n}"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,oBAAoB,EAAEC,aAAa,QAAQ,yBAAyB;AAAC;AAE9E,eAAe,SAASC,GAAG,GAAG;EAC5B,oBACE,QAAC,oBAAoB;IAAC,OAAO,EAAE;MAAE,WAAW,EAAE;IAAO,CAAE;IAAA,uBACrD,QAAC,aAAa;MACZ,WAAW,EAAE,CAACC,IAAI,EAAEC,OAAO,KAAK;QAC9B,OAAOA,OAAO,CAACC,KAAK,CAACC,MAAM,CAAC;UAC1BC,cAAc,EAAE,CACd;YACEC,MAAM,EAAE;cACNC,KAAK,EAAE;YACT;UACF,CAAC;QAEL,CAAC,CAAC;MACJ,CAAE;MACF,SAAS,EAAE,CAACN,IAAI,EAAEC,OAAO,KAAK;QAC5B,OAAOA,OAAO,CAACC,KAAK,CAACK,OAAO,EAAE,CAACC,IAAI,CAAEC,OAAO,IAAK;UAC/C,MAAMC,IAAI,GAAGD,OAAO,CAACE,KAAK,CAACD,IAAI,CAACE,UAAU;UAC1CC,KAAK,CAAE,4BAA2BH,IAAK,EAAC,CAAC;QAC3C,CAAC,CAAC;MACJ;IAAE;MAAA;MAAA;MAAA;IAAA;EACF;IAAA;IAAA;IAAA;EAAA,QACmB;AAE3B;AAAC,KAxBuBX,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module"}